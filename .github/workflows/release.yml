name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: Specify the tag
          - major|minor|patch
          - x|x.x|x.x.x
        default: patch
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.update-version.outputs.version }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || github.token }}

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test
        
      - name: Build binary
        run: bun run build:bin

      - name: Build smol
        run: bun run build:smol

      - name: Update version
        id: update-version
        run: |
          VERSION=$(./scripts/update-version.sh ${{ github.event.inputs.tag }})
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV
          echo "version=${VERSION:1}" >> $GITHUB_OUTPUT
          git add package.json

      - name: Set release
        shell: bash
        run: |
          export VERSION="${{ env.VERSION }}"
          export ARCH=x86_64-linux
          export APP=helix-gpt
          export OUTPUT="$APP-$VERSION-$ARCH"

          mv dist/helix-gpt dist/$OUTPUT
          mv dist/helix-gpt.js "dist/$APP-$VERSION.js"

      - name: Tag release
        run: |
          git config --global user.name "Leon"
          git config --global user.email "leon@nx.ie"

          # Create README.md with version
          sed -e 's/<release-version>/${{ env.VERSION }}/g' assets/template.md > README.md
          git add README.md

          git commit -m 'release: version ${{ env.VERSION }}'
          git push origin ${{ github.ref_name }}
          latest_tag=$(git describe --always --tags `git rev-list --tags --max-count=1`)
          messages=$(git log $latest_tag..HEAD --pretty=format:"%h - %s")
          git tag -m "$messages" -a ${{ env.VERSION }}
          git push origin ${{ env.VERSION }} 
          
      - uses: actions/upload-artifact@v4
        if: vars.RUNNER != 'act'
        with:
          name: bins
          path: dist

  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    env:
        VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Build archive
        shell: bash
        run: |
          set -ex

          source="$(pwd)"
          cd "$(mktemp -d)"
          mv $source/bins* .
          mkdir dist

          for bin in bins/*; do
            filename=$(basename ${bin})  
          
            if [[ "$bin" == *.js ]]; then
              mv $bin dist/$filename 
              continue
            fi
          
            tar -C `dirname $bin` -czvf dist/$filename.tar.gz --transform 's,^.*/,,g' `basename $bin`
          done

          tar -czvf dist/helix-gpt-${{ env.VERSION }}-source.tar.gz -C $source .
          mv dist $source/
          
      - name: Upload binaries to release
        if: vars.RUNNER != 'act'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN || github.token }}
          file: dist/*
          file_glob: true
          tag: ${{ env.VERSION }}
          release_name: "${{ env.VERSION }}"
          overwrite: true
      
      - name: Upload binaries as artifact
        if: vars.RUNNER != 'act'
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: dist/*
